{"ast":null,"code":"// import axios from \"axios\";\n// import httpStatus from \"http-status\";\n// import { createContext, useContext, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\n// export const AuthContext = createContext({});\n\n// const client = axios.create({\n//     baseURL: `${server}/api/v1/users`\n// })\n\n// export const AuthProvider = ({ children }) => {\n\n//     const authContext = useContext(AuthContext);\n\n//     const [userData, setUserData] = useState(authContext);\n\n//     const router = useNavigate();\n\n//     const handleRegister = async (name, username, password) => {\n//         try {\n//             let request = await client.post(\"/register\", {\n//                 name: name,\n//                 username: username,\n//                 password: password\n//             })\n\n//             if (request.status === httpStatus.CREATED) {\n//                 return request.data.message;\n//             }\n//         } catch (err) {\n//             throw err;\n//         }\n//     }\n\n//     const handleLogin = async (username, password) => {\n//         try {\n//             let request = await client.post(\"/login\", {\n//                 username: username,\n//                 password: password\n//             });\n\n//             console.log(username, password)\n//             console.log(request.data)\n\n//             if (request.status === httpStatus.OK) {\n//                 localStorage.setItem(\"token\", request.data.token);\n//                 router(\"/home\")\n//             }\n//         } catch (err) {\n//             throw err;\n//         }\n//     }\n\n//     const getHistoryOfUser = async () => {\n//         try {\n//             let request = await client.get(\"/get_all_activity\", {\n//                 params: {\n//                     token: localStorage.getItem(\"token\")\n//                 }\n//             });\n//             return request.data\n//         } catch\n//          (err) {\n//             throw err;\n//         }\n//     }\n\n//     const addToUserHistory = async (meetingCode) => {\n//         try {\n//             let request = await client.post(\"/add_to_activity\", {\n//                 token: localStorage.getItem(\"token\"),\n//                 meeting_code: meetingCode\n//             });\n//             return request\n//         } catch (e) {\n//             throw e;\n//         }\n//     }\n\n//     const data = {\n//         userData, setUserData, addToUserHistory, getHistoryOfUser, handleRegister, handleLogin\n//     }\n\n//     return (\n//         <AuthContext.Provider value={data}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n\n// }","map":{"version":3,"names":[],"sources":["C:/Users/satwi/Documents/zoomclone/frontened/src/contexts/AuthContext.jsx"],"sourcesContent":["// import axios from \"axios\";\r\n// import httpStatus from \"http-status\";\r\n// import { createContext, useContext, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\n// export const AuthContext = createContext({});\r\n\r\n// const client = axios.create({\r\n//     baseURL: `${server}/api/v1/users`\r\n// })\r\n\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n\r\n//     const authContext = useContext(AuthContext);\r\n\r\n\r\n//     const [userData, setUserData] = useState(authContext);\r\n\r\n\r\n//     const router = useNavigate();\r\n\r\n//     const handleRegister = async (name, username, password) => {\r\n//         try {\r\n//             let request = await client.post(\"/register\", {\r\n//                 name: name,\r\n//                 username: username,\r\n//                 password: password\r\n//             })\r\n\r\n\r\n//             if (request.status === httpStatus.CREATED) {\r\n//                 return request.data.message;\r\n//             }\r\n//         } catch (err) {\r\n//             throw err;\r\n//         }\r\n//     }\r\n\r\n//     const handleLogin = async (username, password) => {\r\n//         try {\r\n//             let request = await client.post(\"/login\", {\r\n//                 username: username,\r\n//                 password: password\r\n//             });\r\n\r\n//             console.log(username, password)\r\n//             console.log(request.data)\r\n\r\n//             if (request.status === httpStatus.OK) {\r\n//                 localStorage.setItem(\"token\", request.data.token);\r\n//                 router(\"/home\")\r\n//             }\r\n//         } catch (err) {\r\n//             throw err;\r\n//         }\r\n//     }\r\n\r\n//     const getHistoryOfUser = async () => {\r\n//         try {\r\n//             let request = await client.get(\"/get_all_activity\", {\r\n//                 params: {\r\n//                     token: localStorage.getItem(\"token\")\r\n//                 }\r\n//             });\r\n//             return request.data\r\n//         } catch\r\n//          (err) {\r\n//             throw err;\r\n//         }\r\n//     }\r\n\r\n//     const addToUserHistory = async (meetingCode) => {\r\n//         try {\r\n//             let request = await client.post(\"/add_to_activity\", {\r\n//                 token: localStorage.getItem(\"token\"),\r\n//                 meeting_code: meetingCode\r\n//             });\r\n//             return request\r\n//         } catch (e) {\r\n//             throw e;\r\n//         }\r\n//     }\r\n\r\n\r\n//     const data = {\r\n//         userData, setUserData, addToUserHistory, getHistoryOfUser, handleRegister, handleLogin\r\n//     }\r\n\r\n//     return (\r\n//         <AuthContext.Provider value={data}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n\r\n// }"],"mappings":"AAAA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;;AAGA;;AAEA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}